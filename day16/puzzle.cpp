//
// Created by rnetuka on 17.12.19.
//

#include <array>
#include <functional>
#include <string>
#include <vector>

#include "../math/math.h"
#include "../math/matrix.h"
#include "../utils.h"
#include "phase.h"

using namespace std;


matrix<int> input_signal(const string& input = "")
{
    string line = input;
    if (input.empty())
        line = read_lines<string>("day16/res/input.txt")[0];

    vector<int> signal;

    for (char digit : line)
        signal.push_back(digit - '0');

    matrix<int> matrix { 1, (int) signal.size() };
    matrix.row(1) = signal;
    return matrix;
}

matrix<int>&& create_signal(matrix<int>&& matrix)
{
    for (int j = 1; j <= matrix.width; j++)
        matrix.at(1, j) = last_digit(matrix.at(1, j));

    return move(matrix);
}

int digits(const matrix<int>& signal, int limit)
{
    int result = 0;
    int n = 0;

    for (int value : signal.row(1)) {
        result *= 10;
        result += value;
        if (++n == limit)
            break;
    }
    return result;
}

int first_eight_digits()
{
    matrix<int> signal = input_signal();
    matrix<int> phase = phase_matrix(signal.width);

    for (int i = 0; i < 100; i++)
        signal = create_signal(signal * phase);

    return digits(signal, 8);
}







int sum(const vector<int>& signal, int from = 0) {
    int result = 0;
    for (int i = from; i < signal.size(); i++)
        result += signal[i];
    return result;
}

int decoded_message()
{
    /*
     * signal 12345678 * 4 times
     *
     *  1 0 -3 0 5  0 -7 0 | 1  0 -3  0  5  0 -7  0 |  1  0 -3  0  5  0 -7  0 | 1  0 -3  0  5  0 -7  0
     *  0 2  3 0 0 -6 -7 0 | 0  2  3  0  0 -6 -7  0 |  0  2  3  0  0 -6 -7  0 | 0  2  3  0  0 -6 -7  0
     *  0 0  3 4 5  0  0 0 |-1 -2 -3  0  0  0  7  8 |  1  0  0  0 -5 -6 -7  0 | 0  0  3  4  5  0  0  0
     *  0 0  0 4 5  6  7 0 | 0  0  0 -4 -5 -6 -7  0 |  0  0  0  4  5  6  7  0 | 0  0  0 -4 -5 -6 -7  0
     *  0 0  0 0 5  6  7 8 | 1  0  0  0  0  0 -7 -8 | -1 -2 -3  0  0  0  0  0 | 1  2  3  4  5  0  0  0
     *  0 0  0 0 0  6  7 8 | 1  2  3  0  0  0  0  0 |  0 -2 -3 -4 -5 -6 -7  0 | 0  0  0  0  0  6  7  8
     *  0 0  0 0 0  0  7 8 | 1  2  3  4  5  0  0  0 |  0  0  0  0 -5 -6 -7 -8 |-1 -2 -3  0  0  0  0  0
     *  0 0  0 0 0  0  0 8 | 1  2  3  4  5  6  7  8 |  0  0  0  0  0  0  0  0 |-1 -2 -3 -4 -5 -6 -7 -8
     *  -------------------+------------------------+-------------------------+-----------------------
     *  0 0  0 0 0  0  0 0 | 1  2  3  4  5  6  7  8 |  1  0  0  0  0  0  0  0 | 0  0 -3 -4 -5 -6 -7 -8
     *  0 0  0 0 0  0  0 0 | 0  2  3  4  5  6  7  8 |  1  2  3  0  0  0  0  0 | 0  0  0  0  0 -6 -7 -8
     *  0 0  0 0 0  0  0 0 | 0  0  3  4  5  6  7  8 |  1  2  3  4  5  0  0  0 | 0  0  0  0  0  0  0  0
     *  0 0  0 0 0  0  0 0 | 0  0  0  4  5  6  7  8 |  1  2  3  4  5  6  7  0 | 0  0  0  0  0  0  0  0
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  5  6  7  8 |  1  2  3  4  5  6  7  8 | 1  0  0  0  0  0  0  0
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  6  7  8 |  1  2  3  4  5  6  7  8 | 1  2  3  0  0  0  0  0
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  7  8 |  1  2  3  4  5  6  7  8 | 1  2  3  4  5  0  0  0
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  8 |  1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  0
     *  -------------------+------------------------+-------------------------+-----------------------
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  6  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  7  8 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  8 | 1  2  3  4  5  6  7  8
     *  -------------------+------------------------+-------------------------+-----------------------
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 1  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  2  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  3  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  0  4  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  5  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  6  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  7  8
     *  0 0  0 0 0  0  0 0 | 0  0  0  0  0  0  0  0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  8
     *
     *  For rows after half of the signal (signal repeated 6 times now):
     *
     *  ... 0 |  1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  4  5  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  5  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  6  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  7  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  8 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *        +-------------------------+------------------------+-----------------------
     *  ... 0 |  0  0  0  0  0  0  0  0 | 1  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  2  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  3  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  4  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  5  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  6  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  7  8 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  8 | 1  2  3  4  5  6  7  8
     *        +-------------------------+------------------------+-----------------------
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 1  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  2  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  3  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  0  4  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  0  0  5  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  0  0  0  6  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  7  8
     *  ... 0 |  0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  0 | 0  0  0  0  0  0  0  8
     *
     *  signal = 12345678
     *  n = 6
     *  len(signal) = 8 * n
     *
     *  j0: sum(signal) * (n / 2)
     *  j1: sum(signal) * (n / 2 - 1) + sum(signal[1:])
     *  j2: sum(signal) * (n / 2 - 1) + sum(signal[2:])
     *  j3: sum(signal) * (n / 2 - 1) + sum(signal[3:])
     *  j4: sum(signal) * (n / 2 - 1) + sum(signal[4:])
     *  j5: sum(signal) * (n / 2 - 1) + sum(signal[5:])
     *  j6: sum(signal) * (n / 2 - 1) + sum(signal[6:])
     *  j7: sum(signal) * (n / 2 - 1) + sum(signal[7:])
     *  ---
     *  j8: sum(signal) * (n / 2 - 1)
     *  j9: sum(signal) * (n / 2 - 2) + sum(signal[1:])
     *  j10: sum(signal) * (n / 2 - 2) + sum(signal[2:])
     *  j11: sum(signal) * (n / 2 - 2) + sum(signal[3:])
     *  ...
     *  j16: sum(signal) * (n / 2 - 2)
     *  j17: sum(signal) * (n / 2 - 3) + sum(signal[1:])
     *  ...
     *
     *  I.e.:
     *  j[k] = sum(signal) *
     *
     */

    //string line = read_lines<string>("day16/res/input.txt")[0];
    //signal_t signal = input_signal(line);

    //signal_t signal = input_signal("12345678");
    //vector<int> signal = input_signal("03036732577212944063491565474664");
    int n = 10'000;
    //int offset = 5'970'837;
    int offset = 303'673;

    /*if (offset < signal.size() / 2)
        return -1;*/

    /*vector<int> next { signal.size };

    for (int i = 0; i < 100; i++) {
        for (int j = 0; j < signal.size; j++) {
            phase_t phase = create_phase(signal.size, j + 1);
            next[j] = signal * phase;
        }
        signal = next;
    }

    function<int(int)> f = [&signal, n](int k) {
        int len = signal.size;
        int foo = k / len + 1;
        int bar = k % len;
        return sum(signal) * (n / 2 - (k / len + 1)) + sum(signal, k % len);
    };*/

    array<int, 8> message { };
    //int k = offset - ((signal.size() * n) / 2);

    for (int i = 0; i < 8; i++)
        ;//message[i] = f(k + i);

    for (int i = 0; i < 8; i++)
        message[i] = last_digit(message[i]);

    /*
     * Ex. 1:
     *
     * signal = 03036732577212944063491565474664
     * len = 32
     * n = 10'000
     * offet = 303'673
     *
     * 0 3 0 3 6 7 3 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 135
     * 0 0 0 3 6 7 3 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 132
     * 0 0 0 0 6 7 3 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 129
     * 0 0 0 0 0 7 3 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 123
     * 0 0 0 0 0 0 3 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 116
     * 0 0 0 0 0 0 0 2 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 113
     * 0 0 0 0 0 0 0 0 5 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 111
     * 0 0 0 0 0 0 0 0 0 7 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 106
     * 0 0 0 0 0 0 0 0 0 0 7 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 99
     * 0 0 0 0 0 0 0 0 0 0 0 2 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 92
     * 0 0 0 0 0 0 0 0 0 0 0 0 1 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 90
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 2 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 89
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 87
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 78
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 74
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 70
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 3 4 9 1 5 6 5 4 7 4 6 6 4 = 70
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 4 9 1 5 6 5 4 7 4 6 6 4 = 64
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 9 1 5 6 5 4 7 4 6 6 4 = 61
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 1 5 6 5 4 7 4 6 6 4 = 57
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 5 6 5 4 7 4 6 6 4 = 48
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 6 5 4 7 4 6 6 4 = 47
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 5 4 7 4 6 6 4 = 42
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 4 7 4 6 6 4 = 36
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7 4 6 6 4 = 31
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 4 6 6 4 = 27
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 6 6 4 = 20
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 6 4 = 16
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 4 = 10
     * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 = 4
     *
     * After 100 repeats:
     * signal_r = 24465799132212494013441065474664
     *
     * 2 4 4 6 5 7 9 9 1 3 2 2 1 2 4 9 4 0 1 3 4 4 1 0 6 5 4 7 4 6 6 4
     * 0 4 4 6 5 7 9 9 1 3 2 2 1 2 4 9 4 0 1 3 4 4 1 0 6 5 4 7 4 6 6 4
     * 0 0 4 6 5 7 9 9 1 3 2 2 1 2 4 9 4 0 1 3 4 4 1 0 6 5 4 7 4 6 6 4
     * 0 0 0 6 5 7 9 9 1 3 2 2 1 2 4 9 4 0 1 3 4 4 1 0 6 5 4 7 4 6 6 4
     * 0 0 0 0 5 7 9 9 1 3 2 2 1 2 4 9 4 0 1 3 4 4 1 0 6 5 4 7 4 6 6 4
     *
     */
    //int bazz = sum(signal);

    // 37325517 too low
    // 40757082
    // 42757082 too low
    return -1;
}